{"version":3,"sources":["Context/createContext.js","Context/dataContext.js","utils/index.js","Map/index.js","CountriesTable/index.js","InfoBox/index.js","Table/index.js","Chart/index.js","News/index.js","App.js","serviceWorker.js","index.js"],"names":["reducer","actions","defaultValue","Context","React","createContext","Provider","children","useReducer","state","dispatch","boundActions","key","value","createDataContext","action","type","countries","playload","mapCountries","data","tableData","sortedData","countryInfo","casesType","country","mapCenter","mapZoom","zoom","historyData","series","historyDays","dates","newsData","getCountriesData","a","axios","get","map","name","iso2","unshift","sort","b","cases","getCountryInfo","getNewsData","articles","handleChangeCaseTypes","caseType","handleChangeCountry","url","lat","long","fetchHistoryData","timeline","objectValue","Object","values","seriesData","each","i","pop","charAt","toUpperCase","slice","keys","lng","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","rounded","num","Math","round","toFixed","Map","useContext","dataContext","className","center","TileLayer","attribution","Circle","color","fillColor","fillOpacity","radius","sqrt","Tooltip","style","backgroundImage","flag","todayCases","todayRecovered","todayDeaths","showDataOnMap","columns","Header","accessor","textAlign","CountriesTable","Card","defaultPageSize","CardBox","active","title","todayAmount","amount","styleClassname","click","onClick","CardBody","InfoBox","Row","Col","xs","sm","Table","id","striped","Chart","useEffect","options","chart","enabled","dataLabels","stroke","width","curve","dashArray","legend","tooltipHoverFormatter","val","opts","w","globals","seriesIndex","dataPointIndex","markers","size","hover","sizeOffset","xaxis","categories","labels","show","yaxis","formatter","tooltip","y","grid","borderColor","NewsBox","article","CardImg","src","urlToImage","alt","href","moment","publishedAt","format","description","NewsContainer","App","dropDownRef","createRef","lg","xl","ref","valueField","textField","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e36eb24.chunk.js","sourcesContent":["import React, { useReducer } from \"react\";\n\nexport default (reducer, actions, defaultValue) => {\n  const Context = React.createContext();\n\n  const Provider = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, defaultValue);\n\n    const boundActions = {};\n    for (let key in actions) {\n      boundActions[key] = actions[key](dispatch);\n    }\n\n    return (\n      <Context.Provider value={{ state, ...boundActions }}>\n        {children}\n      </Context.Provider>\n    );\n  };\n  return { Context, Provider };\n};\n","import createDataContext from \"./createContext\";\nimport axios from \"axios\";\n\nconst trackReducer = (state, action) => {\n  switch (action.type) {\n    case \"fetch_countries_data\":\n      return {\n        ...state,\n        countries: action.playload.countries,\n        mapCountries: action.playload.data,\n        tableData: action.playload.sortedData,\n      };\n    case \"fetch_country_info\":\n      return {\n        ...state,\n        countryInfo: action.playload,\n      };\n    case \"handle_change_cases_type\":\n      return {\n        ...state,\n        casesType: action.playload,\n      };\n    case \"handle_change_country\":\n      return {\n        ...state,\n        country: action.playload.country,\n        countryInfo: action.playload.data,\n        mapCenter: action.playload.mapCenter,\n        mapZoom: action.playload.zoom,\n      };\n    case \"fetch_history_data\":\n      return {\n        ...state,\n        historyData: action.playload.series,\n        historyDays: action.playload.dates,\n      };\n    case \"fetch_news_data\":\n      return {\n        ...state,\n        newsData: action.playload,\n      };\n    default:\n      return {};\n  }\n};\n\nconst getCountryInfo = (dispatch) => async () => {\n  const { data } = await axios.get(\"https://disease.sh/v3/covid-19/all\");\n  return dispatch({\n    type: \"fetch_country_info\",\n    playload: data,\n  });\n};\n\nconst getCountriesData = (dispatch) => async () => {\n  const { data } = await axios.get(\"https://disease.sh/v3/covid-19/countries\");\n\n  const countries = data.map((country) => ({\n    name: country.country,\n    value: country.countryInfo.iso2,\n  }));\n  countries.unshift({ name: \"worldwide\", value: \"worldwide\" });\n  let sortedData = [...data].sort((a, b) => b.cases - a.cases);\n  return dispatch({\n    type: \"fetch_countries_data\",\n    playload: { countries, data, sortedData },\n  });\n};\n\nconst getNewsData = (dispatch) => async () => {\n  let apiKey = \"f5dc9e6860394cb68131d82cea6fc0a0\";\n  const { data } = await axios.get(\n    `https://newsapi.org/v2/everything?q=COVID&sortBy=publishedAt&apiKey=${apiKey}&pageSize=20&page=1`\n  );\n  return dispatch({\n    type: \"fetch_news_data\",\n    playload: data.articles,\n  });\n};\n\nconst handleChangeCaseTypes = (dispatch) => async (caseType) => {\n  return dispatch({\n    type: \"handle_change_cases_type\",\n    playload: caseType,\n  });\n};\n\nconst handleChangeCountry = (dispatch) => async (country) => {\n  const url =\n    country === \"worldwide\"\n      ? \"https://disease.sh/v3/covid-19/all\"\n      : `https://disease.sh/v3/covid-19/countries/${country}`;\n\n  const { data } = await axios.get(url);\n\n  const mapCenter = data.countryInfo\n    ? [data.countryInfo.lat, data.countryInfo.long]\n    : [34.80746, -40.4796];\n  const zoom = 5;\n\n  return dispatch({\n    type: \"handle_change_country\",\n    playload: { country, data, mapCenter, zoom },\n  });\n};\n\nconst fetchHistoryData = (dispatch) => async (country) => {\n  const url =\n    country === \"worldwide\"\n      ? \"https://disease.sh/v3/covid-19/historical/all?lastdays=121\"\n      : `https://disease.sh/v3/covid-19/historical/${country}?lastdays=121`;\n\n  let { data } = await axios.get(url);\n\n  if (country !== \"worldwide\") data = data.timeline;\n\n  let caseTypes = [\"cases\", \"recovered\", \"deaths\"];\n\n  const series = caseTypes.map((caseType) => {\n    const objectValue = Object.values(data[caseType]);\n    const seriesData = objectValue.map((each, i) =>\n      objectValue[i + 1] - each > 0 ? objectValue[i + 1] - each : 0\n    );\n    seriesData.pop();\n    return {\n      name: `${caseType.charAt(0).toUpperCase()}${caseType.slice(1)}`,\n      data: seriesData,\n    };\n  });\n\n  const dates = Object.keys(data[\"cases\"]).slice(1);\n\n  return dispatch({\n    type: \"fetch_history_data\",\n    playload: { series, dates },\n  });\n};\n\nexport const { Provider, Context } = createDataContext(\n  trackReducer,\n  {\n    getCountriesData,\n    getCountryInfo,\n    getNewsData,\n    handleChangeCaseTypes,\n    handleChangeCountry,\n    fetchHistoryData,\n  },\n  {\n    country: \"worldwide\",\n    countryInfo: {},\n    countries: [],\n    mapCountries: [],\n    tableData: [],\n    casesType: \"cases\",\n    mapCenter: { lat: 34.80746, lng: -40.4796 },\n    mapZoom: 3,\n    historyData: [],\n    historyDays: [],\n    newsData: [],\n  }\n);\n","import React from \"react\";\nimport { Circle, Tooltip } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 400,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 800,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const rounded = (num) => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return (num / 1000000).toFixed(2) + \"M\";\n  } else if (num > 10000) {\n    return Math.round(num / 100) / 10 + \"K\";\n  } else {\n    return num;\n  }\n};\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      key={country.country}\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Tooltip>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases:\n            <div>\n              <span>{rounded(country.cases)} </span>\n              <small>\n                + {country.todayCases}\n                {\" new\"}\n              </small>\n            </div>\n          </div>\n          <div className=\"info-recovered\">\n            Recovered:\n            <div>\n              <span>{rounded(country.recovered)} </span>\n              <small>\n                + {country.todayRecovered}\n                {\" new\"}\n              </small>\n            </div>\n          </div>\n          <div className=\"info-deaths\">\n            Deaths:\n            <div>\n              <span>{rounded(country.deaths)} </span>\n              <small>\n                + {country.todayDeaths}\n                {\" new\"}\n              </small>\n            </div>\n          </div>\n        </div>\n      </Tooltip>\n    </Circle>\n  ));\n","import React, { useContext } from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport { Context as dataContext } from \"../Context/dataContext\";\nimport { showDataOnMap } from \"../utils\";\nimport \"./index.css\";\n\nconst Map = () => {\n  const {\n    state: { mapCountries, casesType, mapCenter, mapZoom },\n  } = useContext(dataContext);\n\n  return (\n    <div className=\"map\">\n      <LeafletMap center={mapCenter} zoom={mapZoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(mapCountries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n};\n\nexport default Map;\n","import React, { useContext } from \"react\";\nimport ReactTable from \"react-table-6\";\nimport { Card } from \"reactstrap\";\nimport { Context as dataContext } from \"../Context/dataContext\";\nimport \"./CountriesTable.css\";\n\nconst columns = [\n  {\n    Header: \"Name\",\n    accessor: \"country\", // String-based value accessors!\n    style: { textAlign: \"center\" },\n  },\n  {\n    Header: \"Active\",\n    accessor: \"active\",\n    style: { textAlign: \"center\" },\n  },\n  {\n    Header: \"Cases\",\n    accessor: \"cases\",\n    style: { textAlign: \"center\" },\n  },\n  {\n    Header: \"Today Cases\",\n    accessor: \"todayCases\",\n    style: { textAlign: \"center\" },\n  },\n  {\n    Header: \"Recovered\",\n    accessor: \"recovered\",\n    style: { textAlign: \"center\" },\n  },\n  {\n    Header: \"Today Recovered\",\n    accessor: \"todayDeaths\",\n    style: { textAlign: \"center\" },\n  },\n  {\n    Header: \"Deaths\",\n    accessor: \"deaths\",\n    style: { textAlign: \"center\" },\n  },\n  {\n    Header: \"Today deaths\",\n    accessor: \"todayDeaths\",\n    style: { textAlign: \"center\" },\n  },\n];\n\nconst CountriesTable = () => {\n  const {\n    state: { tableData },\n  } = useContext(dataContext);\n  return (\n    <Card className=\"countries-table-container\">\n      <h4>Worldwide Details</h4>\n      <ReactTable\n        defaultPageSize={15}\n        className=\"-striped -highlight\"\n        data={tableData}\n        columns={columns}\n      />\n    </Card>\n  );\n};\n\nexport default CountriesTable;\n","import React, { useContext } from \"react\";\nimport { Row, Col, Card, CardBody } from \"reactstrap\";\n\nimport { Context as dataContext } from \"../Context/dataContext\";\nimport \"./index.css\";\nimport { rounded } from \"../utils\";\n\nconst CardBox = ({\n  active,\n  title,\n  todayAmount,\n  amount,\n  styleClassname,\n  click,\n}) => (\n  <Card onClick={click}>\n    <CardBody className={`card-box ${active ? \"active\" : \"\"}`}>\n      <h6>{title}</h6>\n      <div className={styleClassname}>\n        + {rounded(todayAmount)} <small>today</small>\n      </div>\n      <small>{rounded(amount)} Total</small>\n    </CardBody>\n  </Card>\n);\n\nconst InfoBox = () => {\n  const {\n    state: { countryInfo, casesType },\n    handleChangeCaseTypes,\n  } = useContext(dataContext);\n  return (\n    <Row className=\"mt-2\">\n      <Col xs={12} sm={4}>\n        <CardBox\n          active={casesType === \"cases\"}\n          title=\"Coronavirus Cases\"\n          todayAmount={countryInfo.todayCases}\n          amount={countryInfo.cases}\n          styleClassname=\"info-confirmed\"\n          click={() => handleChangeCaseTypes(\"cases\")}\n        />\n      </Col>\n\n      <Col xs={12} sm={4}>\n        <CardBox\n          active={casesType === \"recovered\"}\n          title=\"Recovered\"\n          todayAmount={countryInfo.todayRecovered}\n          amount={countryInfo.recovered}\n          styleClassname=\"info-recovered\"\n          click={() => handleChangeCaseTypes(\"recovered\")}\n        />\n      </Col>\n\n      <Col xs={12} sm={4}>\n        <CardBox\n          active={casesType === \"deaths\"}\n          title=\"Deaths\"\n          todayAmount={countryInfo.todayDeaths}\n          amount={countryInfo.deaths}\n          styleClassname=\"info-deaths\"\n          click={() => handleChangeCaseTypes(\"deaths\")}\n        />\n      </Col>\n    </Row>\n  );\n};\n\nexport default InfoBox;\n","import React, { useContext } from \"react\";\nimport { Table as ReactstrapTable } from \"reactstrap\";\nimport { Context as dataContext } from \"../Context/dataContext\";\nimport \"./table.css\";\n\nconst Table = () => {\n  const {\n    state: { tableData, casesType },\n  } = useContext(dataContext);\n  return (\n    <>\n      <h4>\n        Live <span id=\"casesType\">{casesType}</span> by Country\n      </h4>\n      <div className=\"table\">\n        <ReactstrapTable striped>\n          <tbody>\n            {tableData.map((country) => (\n              <tr key={country.country}>\n                <td>{country.country}</td>\n                <td\n                  style={{\n                    textAlign: \"right\",\n                  }}\n                >\n                  {country[casesType]}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </ReactstrapTable>\n      </div>\n    </>\n  );\n};\n\nexport default Table;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useContext } from \"react\";\n\nimport { Context as dataContext } from \"../Context/dataContext\";\nimport ApexChart from \"react-apexcharts\";\nimport { rounded } from \"../utils\";\n\nconst Chart = () => {\n  const {\n    fetchHistoryData,\n    state: { casesType, country, historyData, historyDays },\n  } = useContext(dataContext);\n\n  useEffect(() => {\n    fetchHistoryData(country, casesType);\n  }, [country, casesType]);\n\n  const options = {\n    chart: {\n      type: \"line\",\n      zoom: {\n        enabled: false,\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    stroke: {\n      width: 5,\n      curve: \"straight\",\n      dashArray: [0, 1, 3],\n    },\n    legend: {\n      tooltipHoverFormatter: function (val, opts) {\n        return (\n          val +\n          \" - \" +\n          opts.w.globals.series[opts.seriesIndex][opts.dataPointIndex] +\n          \"\"\n        );\n      },\n    },\n    markers: {\n      size: 0,\n      hover: {\n        sizeOffset: 6,\n      },\n    },\n    xaxis: {\n      categories: historyDays,\n      labels: {\n        show: false,\n      },\n    },\n    yaxis: {\n      labels: {\n        formatter: function (value) {\n          return rounded(value);\n        },\n      },\n    },\n    tooltip: {\n      y: [\n        {\n          title: {\n            formatter: function (val) {\n              return val;\n            },\n          },\n        },\n      ],\n    },\n    grid: {\n      borderColor: \"#f1f1f1\",\n    },\n  };\n\n  return (\n    <div>\n      <h4>History Data (Past 120 days)</h4>\n      <ApexChart options={options} series={historyData} />\n    </div>\n  );\n};\n\nexport default Chart;\n","import React, { useContext } from \"react\";\nimport { Row, Col, CardImg } from \"reactstrap\";\nimport moment from \"moment\";\n\nimport { Context as dataContext } from \"../Context/dataContext\";\nimport \"./News.css\";\n\nconst NewsBox = ({ article }) => (\n  <div className=\"news-box\">\n    <Row>\n      <Col xs={4}>\n        <CardImg src={article.urlToImage} alt=\"\" />\n      </Col>\n      <Col xs={8}>\n        <a href={article.url}>\n          <strong>{article.title}</strong>\n        </a>\n        <div className=\"mt-1\">\n          <small>Published: {moment(article.publishedAt).format(\"llll\")}</small>\n          <br />\n          <p>{article.description.slice(0, 120)}</p>\n        </div>\n      </Col>\n    </Row>\n  </div>\n);\n\nconst NewsContainer = () => {\n  const {\n    state: { newsData },\n  } = useContext(dataContext);\n\n  return (\n    <div>\n      <h4>Top News for COVID</h4>\n      <div className=\"news-boxes\">\n        {newsData.map((article) => (\n          <NewsBox article={article} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default NewsContainer;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useContext, useEffect, createRef } from \"react\";\nimport \"./App.css\";\nimport { Row, Col, Card } from \"reactstrap\";\nimport { DropdownList } from \"react-widgets\";\n\nimport { Context as dataContext } from \"./Context/dataContext\";\nimport Map from \"./Map\";\nimport CountriesTable from \"./CountriesTable\";\nimport InfoBox from \"./InfoBox\";\nimport Table from \"./Table\";\nimport Chart from \"./Chart\";\nimport News from \"./News\";\n\nfunction App() {\n  const dropDownRef = createRef();\n  const {\n    state: { country, countries },\n    getCountryInfo,\n    getCountriesData,\n    handleChangeCountry,\n    getNewsData,\n  } = useContext(dataContext);\n\n  useEffect(() => {\n    getCountriesData();\n    getCountryInfo();\n    getNewsData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Row>\n        <Col lg={12} xl={8}>\n          <div className=\"app_header\">\n            <h1>COVID-19 Tracker</h1>\n            <div className=\"dropdown-box\">\n              <DropdownList\n                data={countries}\n                ref={dropDownRef}\n                valueField=\"value\"\n                textField=\"name\"\n                defaultValue={country}\n                onChange={(country) => handleChangeCountry(country.name)}\n              />\n            </div>\n          </div>\n          <InfoBox />\n          <Map />\n          <CountriesTable />\n        </Col>\n        <Col lg={12} xl={4}>\n          <Card className=\"chart_container\">\n            <Chart />\n          </Card>\n          <Card className=\"table_container\">\n            <Table />\n          </Card>\n          <Card className=\"news-container\">\n            <News />\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider as DataProvider } from \"./Context/dataContext\";\n\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-table-6/react-table.css\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <DataProvider>\n    <App />\n  </DataProvider>,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}